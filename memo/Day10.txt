Day10(20.07.05)

CSS Flex(플렉서블 레이아웃)
대부분의 웹사이트는 수직 구성이며 "위-아래"로 스크롤 하여 사용합니다.
레이아웃을 구성할 때 가장 많이 사용하는 요소들이 기본적으로 블록개념으로 표시되며
이는 뷰에 수직으로 쌓이기 때문에 수직 구성은 상대적으로 쉽게 만들 수 있습니다.
하지만 수평 구성의 경우는 조금 다릅니다. 수평 구조를 만드는 속성이 명확하지 않기
때문에 <table>이나 float 혹은 inline-block으로 구성했습니다.
이런 다양한 문제를 가지고 있기 때문에 레이아웃을 수평으로 쉽게 구성할 수 있는
Flex(플렉서블 레이아웃)가 차선책으로 만들어졌습니다.

display: flex;
플렉스 라인에 더 이상의 여유가 없을 때, 플렉스 요소의 위치를 다음 줄로 넘길지
여부를 설정합니다.

nowrap: 기본 설정으로, 플렉스 요소가 다음 줄로 넘어가지 않습니다. 대신 플렉스 요소
의 너비를 줄여서 한 줄에 모두 배치시킵니다.
wrap: 플렉스 요소가 여유 공간이 없다면 다음 줄로 넘어가서 배치됩니다.
wrap-reverse: 플렉스 요소가 여유 공간이 없으면 다음 줄로 넘어가서 배치됩니다.
단, 아래 쪽이 아닌 위쪽으로 넘어갑니다.
justify-content
플렉스 요소의 수평 방향 정렬 방식을 설정합니다.
flex-start: 기본 설정으로, 플렉스 요소는 플렉스 컨테이너의 앞쪽에서부터 배치됩니다.
flex-end: 플렉스 요소는 플렉스 컨테이너의 뒤쪽에서부터 배치됩니다.
center: 플렉스 요소는 플렉스 컨테이너의 가운데에서부터 배치됩니다.
space-between: 플렉스 요소는 요소들 사이에만 여유 공간을 두고 배치됩니다.
space-around: 플렉스 요소는 앞, 뒤 그리고 요소들 사이에 모두 여유 공간을 두고 배치됩니다.


align-items
플렉스 요소의 수직 방향 정렬 방식을 설정합니다.
이 속성은 한 줄만을 가지는 플렉스 박스에는 효과가 없으며 두 줄 이상 가지는
플렉스 박스에만 효과가 있습니다.
stretch: 기본 설정으로, 플렉스 요소의 높이가 플렉스 컨테이너의 높이와 같게 변경된 뒤
연이어 배치됩니다.
flex-start: 플렉스 요소는 플렉스 컨테이너의 위쪽에 배치됩니다.
flex-end: 플렉스 요소는 플렉스 컨테이너의 아래쪽에 배치됩니다.
center: 플렉스 요소는 플렉스 컨테이너의 가운데에 배치됩니다.
baseline: 플렉스 요소는 플렉스 컨테이너의 기준선에 배치됩니다.

align-self
플렉스 컨테이너의 align-items 속성보다 우선 적용됩니다. 이 속성을 이용하면
플렉스 요소마다 서로 다른 align 속성값을 설정할 수 있습니다.

order

플렉스 컨테이너 안에 있는 플렉스 요소들의 순서를 설정합니다.

flex-grow 
플렉스 컨테이너 아이템들이 차지할 너비들에 대한 증가형 숫자를 지정합니다.

flex-shrink
플렉스 컨테이너 아이템들이 차지할 너비들에 대한 감소형 숫자를 의미합니다.

flex-basis
플렉스 컨테이너 아이템의 길이를 지정합니다.

CSS 2D

transform
이차원 좌표에서 요소를 변형시키는 속성입니다. 이동, 확대, 축소, 회전, 경사등을
만들 수 있습니다.
translate : 요소를 x축 방향이나 y축 방향으로 이동합니다.
scale : 각도를 지정하여 요소를 확대 또는 축소를 시킵니다.
rotate : 각도를 지정하여 요소를 회전시킵니다.
skew : x축 방향과 y축 방향으로 요소를 기울입니다.

벤더 프리픽스(vender prefix)
주요 웹 브라우저 공급자가 새로운 실험적인 기능을 제공할 때 이전 버전의 웹 브라우저에
그 사실을 알리기 위해 사용하는 접두사를 의미합니다. 아직 CSS 권고안에 포함되지
못한 기능이나, 포함 되어 있지만 아직 완벽하게 제정된 상태가 아닌 기능을 사용할 때
벤더 프리픽스를 사용합니다. 해당 기능이 포함되지 않은 이전 버전의 웹 브라우저에도
그 기능을 사용할 수 있습니다.

https://caniuse.com/

linear-gradient (시작색상, 끝색상)

.gradient {
	background: yellow; //속성을 지원하지 않는 모든 브라우저를 위한 코드
	//크롬과 사파리를 위한 코드 -webkit-
	background: -webkit-linear-gradient(yellow, blue);
	//파이어폭스 -moz-
	//오페라 -o-
	//익스플로어 -ms-

	//CSS 표준 문법을 위한 코드 제일 마지막에 작성
	background: linear-gradient(yellow, blue);
}
*벤더 프리픽스를 사용하는 방법은 해당 속성이 적용되지 않았을 경우 표현해야 하는
코드를 가장 먼저 작성해야 하며, 표준 문법 코드는 가장 마지막에 작성해야 합니다.

transition
요소에 추가할 CSS 스타일 전환효과를 설정합니다. 추가할 전환효과나 지속될 시간도
설정할 수 있습니다.

transition-delay : 전환효과가 나타나기 전까지 지연시간을 설정합니다.
설정한 시간이 흐른뒤에 시작합니다.

transition-duration : 전환효과가 지속될 시간을 설정합니다.
transition-property: 요소에 추가할 전환효과를 설정합니다.
transtion-timing-function : 전환효과의 값을 설정합니다.
	linear : 전환효과가 처음부터 끝까지 일정한 속도로 진행합니다.
	ease : 기본값, 전환효과가 천천히 시작되어, 그 다음에는 빨라지고,
		마지막에는 느려집니다.
	ease-in : 전환효과가 천천히 시작됩니다.
	ease-out : 전환효과가 천천히 끝납니다.
	ease-in-out : 전환효과가 천천히 시작되어 천천히 끝납니다.

CSS Animation 
요소의 현재 스타일을 다른 스타일로 천천히 변화시킬 수 있습니다. CSS3에서는
@keyframe 규칙을 사용해 애니메이션 효과를 쉽게 적용할 수 있습니다.

animation-fill-mode : 애니메이션이 끝난 후 어떻게 처리할지 설정합니다.
- none : 아무처리도 하지 않습니다.
- forwards :  애니메이션이 keyframe이 100%에 도달했을 때 마지막 keyframe을 유지합니다.
- backwards : 애니메이션의 스타일을 애니메이션이 실제로 시작되기 전으로 되돌립니다.

animation-direction : 애니메이션의 진행 방향을 정하는 속성입니다.
-reverse : 반대 순서로 진행합니다.
-alternate : 정해진 순서로 진행했다가 다시 반대 순서로 진행합니다.
-alternate-reverse : 반대 순서로 진행했다가 다시 정해진 순서로 진행합니다.\

animation-iteration-count : 애니메이션이 몇 번 반복될지 설정합니다.
숫자 : 해당 숫자만큼 반복합니다.
infinite : 무한 반복합니다.

@keyframe
시작 : from, 0%...
끝 : to, 100%...

perspective : 3D환경을 만들기 위해 사용자의 관찰자 시점, 즉 투영점을 구체화해서
입체감을 부여하는 속성입니다. 스크린으로 부터 해당 px만큼 떨어진 곳에서 관찰자가 
있다는 것을 근거로 구성합니다.

